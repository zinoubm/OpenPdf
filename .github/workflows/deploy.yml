name: build

on:
  push:
    branches:
      - "celery"

jobs:
  push_to_docker_hub:
    name: Push Image to Registry
    runs-on: ubuntu-latest
    steps:
      - name: copy the code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push backend Image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: openpdfai/backend
          IMAGE_TAG: latest

        run: |
          docker build -f ./backend/backend.dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push Queue Image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: openpdfai/queue
          IMAGE_TAG: latest

        run: |
          docker build -f ./backend/batch.dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy Terrafrom Rousourses
        env:
          TF_VAR_aws_access_key_id: ${{secrets.AWS_ACCESS_KEY_ID}}
          TF_VAR_aws_secret_access_key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          TF_VAR_region: ${{secrets.AWS_REGION}}
          TF_VAR_tld_zone_id: ${{secrets.AWS_DNS_ZONE_ID}}
          TF_VAR_ecs_task_desired_count: ${{secrets.ECS_TASK_DESIRED_COUNT}}
          TF_VAR_service_name: ${{secrets.SERVICE_NAME}}

        run: make deploy
